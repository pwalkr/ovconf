#!/usr/bin/env bash

usage() {
cat <<EOF
# OpenVPN Config Generator

    ovconfig [options] <action> [action params]

## Options

    -c, --conf
        Path to conf parameters file

    -p, --pki
        Path to pki folder

## Actions

    help [conf]
        Print this help or a sample conf file

    client <name>
        Generate client config, printed to stdout. The pki folder will be
        searched for certificates and appended to the output.

    server <output dir>
        Generate server configs. All files will be output to directory.

EOF
}

help_conf() {
cat <<'EOF'
OVC_PKI="pki"

ovc_dev="tun"

ovc_proto="udp"
ovc_port="1194"

ovc_remote="my-server.net $ovc_port"

ovc_cipher="AES-256-CBC"

# Credentials de-escalation
ovc_user="nobody"
ovc_group="nobody"

ovc_comp="comp-lzo"

# Log file verbosity
ovc_verb="3"
EOF
}

gen_client() {
	local name="${args[0]}"
	local file_ca=
	local file_cert=
	local file_key=

	if [ -z "$name" ]; then
		echo "Missing client name" 1>&2
		return 1
	fi

	if [ ! -d "$OVC_PKI" ]; then
		echo "Missing pki folder" 1>&2
		return 1
	fi

	file_ca="$OVC_PKI/ca.crt"
	file_cert="$OVC_PKI/issued/$name.crt"
	file_key="$OVC_PKI/private/$name.key"

	if [ ! -r "$file_ca" ]; then
		echo "Missing public ca file" 1>&2
		return 1
	fi
	if [ ! -r "$file_cert" ]; then
		echo "Missing client public cert file" 1>&2
		return 1
	fi
	if [ ! -r "$file_key" ]; then
		echo "Missing client private key file" 1>&2
		return 1
	fi

	echo client
	printc -r ovc_remote remote
	printc ovc_dev dev
	printc ovc_proto proto
	printc ovc_resolv_retry "resolv-retry"
	printc ovc_remote_cert_tls "remote-cert-tls"
	printc ovc_cipher cipher
	printc ovc_comp
	echo "<ca>"
	cat "$file_ca"
	echo "</ca>"
	echo "<cert>"
	cat "$file_cert"
	echo "</cert>"
	echo "<key>"
	cat "$file_key"
	echo "</key>"
	if [ -r "$OVC_PKI/ta.key" ]; then
		echo "<tls-crypt>"
		cat "$OVC_PKI/ta.key"
		echo "</tls-crypt>"
	fi
	return 0
}

gen_server() {
	if [ ! -d "$server_outdir" ]; then
		echo "Missing server output directory" 1>&2
		return 1
	fi

	printc ovc_proto proto
	printc ovc_comp
}

printc() {
	local required=
	if [ "$1" = "-r" ]; then
		required=1
		shift
	fi
	local conf="$1"
	local value="$(eval echo "\$$conf")"
	local key="$2"

	if [ -z "$value" ]; then
		if [ "$required" ]; then
			echo "Missing required conf: $conf" 1>&2
			exit 1
		else
			return
		fi
	fi

	if [ "$key" ]; then
		printf "$key "
	fi
	echo "$value"
}

source_conf() {
	if [ -f "$conf" ]; then
		. "$conf"
	else
		echo "Missing conf file"
		return 1
	fi
}

conf="./conf"
OVC_PKI="./pki"

action=
args=
client_name=
server_outdir=

while [ "$1" ]; do
	case "$1" in
		-c|--conf)
			conf="$2"
			shift
		;;
		-h|--help)
			usage
			exit
		;;
		*)
			action="$1"
			shift
			args=("$@")
			shift ${#args[@]}
		;;
	esac
	shift
done

if [ "$action" = client ]; then
	source_conf || exit 1
	gen_client
elif [ "$action" = server ]; then
	source_conf || exit 1
	gen_server
else
	if [ "${args[0]}" = conf ]; then
		help_conf
	else
		usage
	fi
fi
